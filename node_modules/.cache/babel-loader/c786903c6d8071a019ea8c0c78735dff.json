{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shahd\\\\OneDrive\\\\Desktop\\\\ZTM_WebBasics\\\\face-recognition-brain\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Particles from 'react-particles-js';\nimport Navigation from './components/navigation/Navigation';\nimport SignIn from './components/signIn/SignIn';\nimport Register from './components/register/Register';\nimport ImageLinkForm from './components/imageLinkForm/ImageLinkForm';\nimport Rank from './components/rank/Rank';\nimport FaceRecognition from './components/faceRecognition/FaceRecognition';\nimport Clarifai from 'clarifai';\nconst app = new Clarifai.App({\n  apiKey: '7f580a07a6434a7cb822ee913db81d99'\n});\nconst particlesJSON = {\n  \"particles\": {\n    \"number\": {\n      \"value\": 100,\n      \"density\": {\n        \"enable\": true,\n        \"value_area\": 700 // Denser the smaller the number.\n\n      }\n    },\n    \"color\": {\n      // The color for every node, not the connecting lines.\n      \"value\": \"#E8E8E8\" // Or use an array of colors like [\"#9b0000\", \"#001378\", \"#0b521f\"]\n\n    },\n    \"shape\": {\n      \"type\": \"polygon\",\n      // Can show circle, edge (a square), triangle, polygon, star, img, or an array of multiple.\n      \"stroke\": {\n        // The border\n        \"width\": 2,\n        \"color\": \"#E8E8E8\"\n      },\n      \"polygon\": {\n        // if the shape is a polygon\n        \"nb_sides\": 5\n      }\n    },\n    \"opacity\": {\n      \"value\": 0.7,\n      \"random\": true\n    },\n    \"size\": {\n      \"value\": 1,\n      \"random\": true\n    },\n    \"line_linked\": {\n      \"enable\": true,\n      \"distance\": 200,\n      // The radius before a line is added, the lower the number the more lines.\n      \"color\": \"#E8E8E8\",\n      \"opacity\": 0.5,\n      \"width\": 1\n    },\n    \"move\": {\n      \"enable\": true,\n      \"speed\": 2,\n      \"direction\": \"top\",\n      // Move them off the canvas, either \"none\", \"top\", \"right\", \"bottom\", \"left\", \"top-right\", \"bottom-right\" et cetera...\n      \"random\": true,\n      \"straight\": false,\n      // Whether they'll shift left and right while moving.\n      \"out_mode\": \"out\",\n      // What it'll do when it reaches the end of the canvas, either \"out\" or \"bounce\".\n      \"bounce\": false,\n      \"attract\": {\n        // Make them start to clump together while moving.\n        \"enable\": true,\n        \"rotateX\": 600,\n        \"rotateY\": 1200\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.calculateFaceLocation = data => {\n      const clarifai_face = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputImage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      return {\n        leftCol: clarifai_face.left_col * width,\n        topRow: clarifai_face.top_row * height,\n        rightCol: width - clarifai_face.right_col * width,\n        bottomRow: height - clarifai_face.bottom_row * height\n      };\n    };\n\n    this.displayFaceBox = box => {\n      console.log(box);\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input).then(response => this.displayFaceBox(this.calculateFaceLocation(response))).catch(err => console.log(err));\n    };\n\n    this.onRouteChange = route => {\n      if (route === 'signout') {\n        this.setState({\n          isSignedIn: false\n        });\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: false\n    };\n  }\n\n  render() {\n    const {\n      imageUrl,\n      route,\n      isSignedIn\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Particles, {\n      className: \"particles\",\n      params: particlesJSON,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Navigation, {\n      isSignedIn: isSignedIn,\n      onRouteChange: this.onRouteChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 8\n      }\n    }), route === 'home' ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Rank, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(ImageLinkForm, {\n      onInputChange: this.onInputChange,\n      onButtonSubmit: this.onButtonSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(FaceRecognition, {\n      box: this.state.box,\n      imageUrl: imageUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    })) : route === 'signin' ? /*#__PURE__*/React.createElement(SignIn, {\n      onRouteChange: this.onRouteChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(Register, {\n      onRouteChange: this.onRouteChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 15\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/shahd/OneDrive/Desktop/ZTM_WebBasics/face-recognition-brain/src/App.js"],"names":["React","Component","Particles","Navigation","SignIn","Register","ImageLinkForm","Rank","FaceRecognition","Clarifai","app","App","apiKey","particlesJSON","constructor","calculateFaceLocation","data","clarifai_face","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","console","log","setState","onInputChange","event","input","target","value","onButtonSubmit","imageUrl","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","onRouteChange","route","isSignedIn","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport Particles from 'react-particles-js';\n\nimport Navigation from './components/navigation/Navigation';\nimport SignIn from './components/signIn/SignIn';\nimport Register from './components/register/Register';\nimport ImageLinkForm from './components/imageLinkForm/ImageLinkForm';\nimport Rank from './components/rank/Rank';\nimport FaceRecognition from './components/faceRecognition/FaceRecognition'\n\nimport Clarifai from 'clarifai';\n\nconst app = new Clarifai.App({\n  apiKey: '7f580a07a6434a7cb822ee913db81d99'\n});\n\nconst particlesJSON = {\n  \"particles\": {\n    \"number\": {\n      \"value\": 100,\n      \"density\": {\n        \"enable\": true,\n        \"value_area\": 700 // Denser the smaller the number.\n      }\n    },\n    \"color\": { // The color for every node, not the connecting lines.\n      \"value\": \"#E8E8E8\" // Or use an array of colors like [\"#9b0000\", \"#001378\", \"#0b521f\"]\n    },\n    \"shape\": {\n        \"type\": \"polygon\", // Can show circle, edge (a square), triangle, polygon, star, img, or an array of multiple.\n        \"stroke\": { // The border\n          \"width\": 2,\n          \"color\": \"#E8E8E8\"\n        },\n        \"polygon\": { // if the shape is a polygon\n          \"nb_sides\": 5\n        }\n    },\n    \"opacity\": {\n      \"value\": 0.7,\n      \"random\": true\n    },\n    \"size\": {\n      \"value\": 1,\n      \"random\": true\n    },\n    \"line_linked\": {\n      \"enable\": true,\n      \"distance\": 200, // The radius before a line is added, the lower the number the more lines.\n      \"color\": \"#E8E8E8\",\n      \"opacity\": 0.5,\n      \"width\": 1\n    },\n    \"move\": {\n      \"enable\": true,\n      \"speed\": 2,\n      \"direction\": \"top\", // Move them off the canvas, either \"none\", \"top\", \"right\", \"bottom\", \"left\", \"top-right\", \"bottom-right\" et cetera...\n      \"random\": true,\n      \"straight\": false, // Whether they'll shift left and right while moving.\n      \"out_mode\": \"out\", // What it'll do when it reaches the end of the canvas, either \"out\" or \"bounce\".\n      \"bounce\": false,\n      \"attract\": { // Make them start to clump together while moving.\n        \"enable\": true,\n        \"rotateX\": 600,\n        \"rotateY\": 1200\n      }\n    }\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: false\n    }\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifai_face = data.outputs[0].data.regions[0].region_info.bounding_box\n    const image = document.getElementById('inputImage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifai_face.left_col *  width,\n      topRow: clarifai_face.top_row *  height,\n      rightCol: width - (clarifai_face.right_col *  width),\n      bottomRow: height - (clarifai_face.bottom_row *  height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    console.log(box);\n    this.setState({ box: box })\n  }\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value })\n  }\n\n  onButtonSubmit = () => {\n    this.setState({ imageUrl: this.state.input })\n    app.models.predict(\n      Clarifai.FACE_DETECT_MODEL, this.state.input)\n      .then(\n        (response) => this.displayFaceBox(\n          this.calculateFaceLocation(response)\n      )).catch(\n          err => console.log(err)\n      );\n  }\n\n  onRouteChange = (route) => {\n    if(route === 'signout') {\n      this.setState({ isSignedIn: false })\n    } else if (route === 'home') {\n      this.setState({ isSignedIn: true })\n    }\n    this.setState({ route: route });    \n  }\n\n  render() {\n  \n    const { imageUrl, route, isSignedIn } = this.state;\n    return (\n      <div className=\"App\">\n      <Particles\n        className = 'particles' \n        params={particlesJSON} \n      />\n       <Navigation isSignedIn = { isSignedIn } onRouteChange = { this.onRouteChange } />\n       { \n          route === 'home' ?\n          <div>\n            <Rank /> \n            <ImageLinkForm \n              onInputChange = {this.onInputChange} \n              onButtonSubmit = {this.onButtonSubmit}   \n            />  \n            <FaceRecognition box = {this.state.box} imageUrl = {imageUrl} />\n          </div>\n            : (\n              route === 'signin' ?\n              <SignIn onRouteChange = { this.onRouteChange }/> \n              :\n              <Register onRouteChange = { this.onRouteChange }/> \n            ) \n       }\n      </div>\n    );\n  }  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}